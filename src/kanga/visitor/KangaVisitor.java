//
// Generated by JTB 1.3.2
//

package kanga.visitor;

import kanga.kanga2Mips.KangaStack;
import kanga.kanga2Mips.MipsStmt;
import kanga.syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class KangaVisitor extends  GJDepthFirst<MipsStmt,KangaStack> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public MipsStmt visit(NodeList n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("");
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            _ret.append(e.nextElement().accept(this,argu));
            _count++;
        }
        return _ret;
    }

    public MipsStmt visit(NodeListOptional n, KangaStack argu) {
        if ( n.present() ) {
            MipsStmt _ret= new MipsStmt("");
            int _count=0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                _ret.append(e.nextElement().accept(this,argu));
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public MipsStmt visit(NodeOptional n, KangaStack argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return null;
    }

    public MipsStmt visit(NodeSequence n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("");
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            _ret.append(e.nextElement().accept(this,argu));
            _count++;
        }
        return _ret;
    }

    public MipsStmt visit(NodeToken n, KangaStack argu) { return new MipsStmt(n.tokenImage, n); }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> "["
     * f5 -> IntegerLiteral()
     * f6 -> "]"
     * f7 -> "["
     * f8 -> IntegerLiteral()
     * f9 -> "]"
     * f10 -> StmtList()
     * f11 -> "END"
     * f12 -> ( Procedure() )*
     * f13 -> <EOF>
     */
    public MipsStmt visit(Goal n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt(".text\n.globl main\nmain:\n");
        _ret.append("move $fp, $sp\nsubu $sp, $sp, ");

        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        Integer numArg = Integer.parseInt(n.f2.accept(this, argu).getStmt());
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        Integer len2 = Integer.parseInt(n.f8.accept(this, argu).getStmt());
        len2 = len2 - 4;
        if(len2 < 0) len2 = 0;

        _ret.append((Integer.parseInt(n.f5.f0.toString()) -numArg + 4 +len2 + 1) * 4 + "");//What if main has arguments?
        _ret.append("\nsw $ra, -4($fp)\n");
        n.f9.accept(this, argu);
        KangaStack ks = new KangaStack(numArg - 4, len2);
        _ret.append(n.f10.accept(this, ks));
        _ret.append("lw $ra, -4($fp)\naddu $sp, $sp, ");
        _ret.append((Integer.parseInt(n.f5.f0.toString()) - numArg + 4 + len2 + 1) * 4 + "");
        _ret.append("\nj $ra\n");
        n.f11.accept(this, argu);
        _ret.append(n.f12.accept(this, argu));
        n.f13.accept(this, argu);
        _ret.append(".text\n.globl _halloc\n");
        _ret.append("_halloc:\n" +
                "li $v0, 9\n" +
                "syscall\n" +
                "j $ra\n");
        _ret.append(".text\n" +
                ".globl _print\n" +
                "_print:\n" +
                "li $v0, 1\n" +
                "syscall\n" +
                "la $a0, newl\n" +
                "li $v0, 4\n" +
                "syscall\n" +
                "j $ra\n");
        _ret.append(".data\n" +
                ".align 0\n" +
                "newl: .asciiz \"\\n\"\n" +
                ".data\n" +
                ".align 0\n" +
                "str_er: .asciiz \"ERROR: Abnormal termination.\\n\"");
        return _ret;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public MipsStmt visit(StmtList n, KangaStack argu) {
        MipsStmt _ret= n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> "["
     * f5 -> IntegerLiteral()
     * f6 -> "]"
     * f7 -> "["
     * f8 -> IntegerLiteral()
     * f9 -> "]"
     * f10 -> StmtList()
     * f11 -> "END"
     */
    public MipsStmt visit(Procedure n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt(".text\n");
        _ret.append(".globl ");
        MipsStmt proc = n.f0.accept(this, argu);
        _ret.append(proc.getStmt().replace(':', ' '));
        _ret.append("\n");
        _ret.append(proc);
        _ret.append("\n");
        n.f1.accept(this, argu);
        Integer numArg = Integer.parseInt(n.f2.accept(this, argu).getStmt());
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        _ret.append("\nsw $fp, -8($sp)\nmove $fp, $sp\nsubu $sp, $sp, ");
        Integer len = Integer.parseInt(n.f5.accept(this, argu).getStmt());

        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        Integer len2 = Integer.parseInt(n.f8.accept(this, argu).getStmt());
        len2 = len2 - 4;
        if(len2 < 0) len2 = 0;
        _ret.append((len - numArg + 4 + len2 + 2) * 4 + "\n");
        _ret.append("sw $ra, -4($fp)\n");
        n.f9.accept(this, argu);
        KangaStack kv = new KangaStack(numArg - 4, len2);
        _ret.append(n.f10.accept(this, kv));
        n.f11.accept(this, argu);
        _ret.append("lw $ra, -4($fp)\nlw $fp, -8($fp)\naddu $sp, $sp, ");
        _ret.append((len - numArg + 4 + len2 + 2) * 4 + "\nj $ra\n");
        return _ret;
    }

    /**
     * f0 -> NoOpStmt()
     *       | ErrorStmt()
     *       | CJumpStmt()
     *       | JumpStmt()
     *       | HStoreStmt()
     *       | HLoadStmt()
     *       | MoveStmt()
     *       | PrintStmt()
     *       | ALoadStmt()
     *       | AStoreStmt()
     *       | PassArgStmt()
     *       | CallStmt()
     */
    public MipsStmt visit(Stmt n, KangaStack argu) {
        MipsStmt _ret=  n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public MipsStmt visit(NoOpStmt n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("nop\n", n);
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "ERROR"
     */
    public MipsStmt visit(ErrorStmt n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("li $v0, 4\nla $a0, str_er\nsyscall\n", n);//Print error messages
        _ret.append("li $v0,10\nsyscall\n");// Exit
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Reg()
     * f2 -> Label()
     */
    public MipsStmt visit(CJumpStmt n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("beqz ", n);
        n.f0.accept(this, argu);

        _ret.append(n.f1.accept(this, argu));
        _ret.append(" ");
        _ret.append(n.f2.accept(this, argu).getStmt().replace(':', ' '));
        _ret.append("\n");
        return _ret;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public MipsStmt visit(JumpStmt n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("b ", n);
        n.f0.accept(this, argu);
        _ret.append(n.f1.accept(this, argu).getStmt().replace(':', ' '));
        _ret.append("\n");
        return _ret;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Reg()
     * f2 -> IntegerLiteral()
     * f3 -> Reg()
     */
    public MipsStmt visit(HStoreStmt n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("sw ", n);
        n.f0.accept(this, argu);
        _ret.append(n.f3.accept(this, argu));
        _ret.append(" ");
        _ret.append(n.f2.accept(this, argu));
        _ret.append("(");
        _ret.append(n.f1.accept(this, argu));
        _ret.append(")\n");
        return _ret;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Reg()
     * f2 -> Reg()
     * f3 -> IntegerLiteral()
     */
    public MipsStmt visit(HLoadStmt n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("lw ");
        n.f0.accept(this, argu);
        _ret.append(n.f1.accept(this, argu));
        _ret.append(" ");
        _ret.append(n.f3.accept(this, argu));
        _ret.append("(");
        _ret.append(n.f2.accept(this, argu));
        _ret.append(")\n");
        return _ret;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Reg()
     * f2 -> Exp()
     */
    public MipsStmt visit(MoveStmt n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("", n);
        n.f0.accept(this, argu);
        MipsStmt reg = n.f1.accept(this, argu);
        MipsStmt exp = n.f2.accept(this, argu);
        if(exp.isOperator()) {
            String ans = exp.getStmt();
            String[] args = ans.split("@");
            _ret.append(args[0]);
            _ret.append(" ");
            _ret.append(reg);
            _ret.append(",");
            _ret.append(args[1]);
            _ret.append("\n");
        }
        else if(exp.isReg()) {
            _ret.append("move ");
            _ret.append(reg);
            _ret.append(" ");
            _ret.append(exp);
            _ret.append("\n");
        }

        else if(exp.isLabel()) {
            _ret.append("la ");
            _ret.append(reg);
            _ret.append(" ");
            _ret.append(exp);
            _ret.append("\n");
        }

        else if(exp.isConstant()) {
            _ret.append("li ");
            _ret.append(reg);
            _ret.append(" ");
            _ret.append(exp);
            _ret.append("\n");
        }
        else {
            _ret.append(exp);
            _ret.append("move ");
            _ret.append(reg);
            _ret.append(" $v0\n");
        }
        return _ret;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> SimpleExp()
     */
    public MipsStmt visit(PrintStmt n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("move $a0 ");
        n.f0.accept(this, argu);
        _ret.append(n.f1.accept(this, argu));
        _ret.append("\njal _print\n");
        return _ret;
    }

    /**
     * f0 -> "ALOAD"
     * f1 -> Reg()
     * f2 -> SpilledArg()
     */
    public MipsStmt visit(ALoadStmt n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("lw ");
        n.f0.accept(this, argu);
        _ret.append(n.f1.accept(this, argu));
        _ret.append(",");
        _ret.append(n.f2.accept(this, argu));
        _ret.append("\n");
        return _ret;
    }

    /**
     * f0 -> "ASTORE"
     * f1 -> SpilledArg()
     * f2 -> Reg()
     */
    public MipsStmt visit(AStoreStmt n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("sw ");
        n.f0.accept(this, argu);
        _ret.append(n.f2.accept(this, argu));
        _ret.append(",");
        _ret.append(n.f1.accept(this, argu));
        _ret.append("\n");
        return _ret;
    }

    /**
     * f0 -> "PASSARG"
     * f1 -> IntegerLiteral()
     * f2 -> Reg()
     */
    public MipsStmt visit(PassArgStmt n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("sw ");
        n.f0.accept(this, argu);
        _ret.append(n.f2.accept(this, argu));
        _ret.append(",");
        Integer tmp = Integer.parseInt(n.f1.accept(this, argu).getStmt());
        _ret.append((tmp - 1) * 4 + "($sp)\n");
        return _ret;
    }

    /**
     * f0 -> "CALL"
     * f1 -> SimpleExp()
     */
    public MipsStmt visit(CallStmt n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("jalr ", n);
        n.f0.accept(this, argu);
        _ret.append(n.f1.accept(this, argu));
        _ret.append("\n");
        return _ret;
    }

    /**
     * f0 -> HAllocate()
     *       | BinOp()
     *       | SimpleExp()
     */
    public MipsStmt visit(Exp n, KangaStack argu) {
        MipsStmt _ret=n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> SimpleExp()
     */
    public MipsStmt visit(HAllocate n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("");
        n.f0.accept(this, argu);
        MipsStmt exp = n.f1.accept(this, argu);
        if(exp.isConstant())
            _ret.append("li $a0 ");
        else if(exp.isReg())
            _ret.append("move $a0 ");
        else if(exp.isLabel())
            _ret.append("lw $a0 ");
        _ret.append(exp);
        _ret.append("\njal _halloc\n");
        return _ret;
    }

    /**
     * f0 -> Operator()
     * f1 -> Reg()
     * f2 -> SimpleExp()
     */
    public MipsStmt visit(BinOp n, KangaStack argu) {
        MipsStmt _ret=new MipsStmt("", n);
        _ret.append(n.f0.accept(this, argu));
        _ret.append("@");
        _ret.append(n.f1.accept(this, argu));
        _ret.append(",");
        _ret.append(n.f2.accept(this, argu));
        _ret.append("\n");

        return _ret;
    }

    /**
     * f0 -> "LT"
     *       | "PLUS"
     *       | "MINUS"
     *       | "TIMES"
     */
    public MipsStmt visit(Operator n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("", n);
        MipsStmt oper = n.f0.accept(this, argu);
        switch (oper.getStmt()) {
            case "LT":
                _ret.append("slt");
                break;
            case "PLUS":
                _ret.append("add");
                break;
            case "MINUS":
                _ret.append("sub");
                break;
            case "TIMES":
                _ret.append("mul");
        }
        return _ret;
    }

    /**
     * f0 -> "SPILLEDARG"
     * f1 -> IntegerLiteral()
     */
    public MipsStmt visit(SpilledArg n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("", n);

        n.f0.accept(this, argu);
        Integer tmp = Integer.parseInt(n.f1.accept(this, argu).getStmt());
        if(tmp < argu.getSpilledArgNum())
            _ret.append(tmp * 4 + "($fp)");
        else
            _ret.append((tmp - argu.getSpilledArgNum() + argu.getSubroutineStackLen()) * 4 + "($sp)");
        return _ret;
    }

    /**
     * f0 -> Reg()
     *       | IntegerLiteral()
     *       | Label()
     */
    public MipsStmt visit(SimpleExp n, KangaStack argu) {
        MipsStmt tmp = n.f0.accept(this, argu);
        MipsStmt _ret = new MipsStmt(tmp.getStmt().replace(':', ' '), tmp.getNode());
        return _ret;
    }

    /**
     * f0 -> "a0"
     *       | "a1"
     *       | "a2"
     *       | "a3"
     *       | "t0"
     *       | "t1"
     *       | "t2"
     *       | "t3"
     *       | "t4"
     *       | "t5"
     *       | "t6"
     *       | "t7"
     *       | "s0"
     *       | "s1"
     *       | "s2"
     *       | "s3"
     *       | "s4"
     *       | "s5"
     *       | "s6"
     *       | "s7"
     *       | "t8"
     *       | "t9"
     *       | "v0"
     *       | "v1"
     */
    public MipsStmt visit(Reg n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt("$" + n.f0.accept(this, argu).getStmt(), n);
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public MipsStmt visit(IntegerLiteral n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt(n.f0.tokenImage, n);
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public MipsStmt visit(Label n, KangaStack argu) {
        MipsStmt _ret= new MipsStmt(n.f0.tokenImage, n);
        _ret.append(":");
        n.f0.accept(this, argu);
        return _ret;
    }

}
