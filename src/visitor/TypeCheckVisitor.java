//
// Generated by JTB 1.3.2
//

package visitor;
import miniJava.symbolTable.*;
import syntaxtree.*;
import syntaxtree.ArrayType;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class TypeCheckVisitor extends GJDepthFirst<VariableType, SymbolTable> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public VariableType visit(NodeList n, SymbolTable argu) {
        VariableType _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public VariableType visit(NodeListOptional n, SymbolTable argu) {
        if ( n.present() ) {
            VariableType _ret=null;
            int _count=0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this,argu);
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public VariableType visit(NodeOptional n, SymbolTable argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return null;
    }

    public VariableType visit(NodeSequence n, SymbolTable argu) {
        VariableType _ret=null;
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
        }
        return _ret;
    }

    public VariableType visit(NodeToken n, SymbolTable argu) { return null; }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    public VariableType visit(Goal n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> ( VarDeclaration() )*
     * f15 -> ( Statement() )*
     * f16 -> "}"
     * f17 -> "}"
     */
    public VariableType visit(MainClass n, SymbolTable a) {
        VariableType _ret= new ClassType(n.f1.toString());
        MethodTable argu = ClassTree.getClassTable(n.f1.f0.toString()).getMethod("main");
        n.f0.accept(this, argu);
       // n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        //n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);
        //n.f14.accept(this, argu);
        n.f15.accept(this, argu);
        n.f16.accept(this, argu);
        n.f17.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     *       | ClassExtendsDeclaration()
     */
    public VariableType visit(TypeDeclaration n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public VariableType visit(ClassDeclaration n, SymbolTable a) {
        VariableType _ret= new ClassType(n.f1.f0.toString());
        ClassTable argu = ClassTree.getClassTable(n.f1.f0.toString());
        n.f0.accept(this, argu);
       // n.f1.accept(this, argu);
        n.f2.accept(this, argu);
       // n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public VariableType visit(ClassExtendsDeclaration n, SymbolTable a) {
        VariableType _ret=new ClassType(n.f1.f0.toString());
        ClassTable argu = ClassTree.getClassTable(n.f1.f0.toString());
        n.f0.accept(this, argu);
        //n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        //n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        //n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public VariableType visit(VarDeclaration n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        //n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Expression()
     * f11 -> ";"
     * f12 -> "}"
     */
    public VariableType visit(MethodDeclaration n, SymbolTable a) {
        VariableType _ret=null;
        MethodTable argu = ((ClassTable)a).getMethod(n.f2.f0.toString());
        n.f0.accept(this, argu);
        _ret = n.f1.accept(this, argu);
        //n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        //n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        //n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public VariableType visit(FormalParameterList n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public VariableType visit(FormalParameter n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public VariableType visit(FormalParameterRest n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     *       | BooleanType()
     *       | IntegerType()
     *       | Identifier()
     */
    public VariableType visit(Type n, SymbolTable argu) {
        VariableType _ret=n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public VariableType visit(ArrayType n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return new ArraysType();
    }

    /**
     * f0 -> "boolean"
     */
    public VariableType visit(BooleanType n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        return new BoolType();
    }

    /**
     * f0 -> "int"
     */
    public VariableType visit(IntegerType n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        return new IntType();
    }

    /**
     * f0 -> Block()
     *       | AssignmentStatement()
     *       | ArrayAssignmentStatement()
     *       | IfStatement()
     *       | WhileStatement()
     *       | PrintStatement()
     */
    public VariableType visit(Statement n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public VariableType visit(Block n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public VariableType visit(AssignmentStatement n, SymbolTable argu) {
        VariableType _ret=null;
        _ret = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        VariableType u = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        // Compatible?
        // To be written
        if(((MethodTable)argu).isDefined(n.f0.toString()) == null) {
            System.out.println(n.f0.toString() + " is undefined.");
        }
        else {
            if(_ret.isDescendent(u)) System.out.println(n.f2.toString() + " does not match the type of " + n.f0.toString());

        }
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Expression()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     */
    public VariableType visit(ArrayAssignmentStatement n, SymbolTable argu) {
        VariableType _ret=null;
        _ret = n.f0.accept(this, argu);
        if(!_ret.isArray()) {
            System.out.println(n.f2.toString() + " should be an array.");
        }
        n.f1.accept(this, argu);
        _ret = n.f2.accept(this, argu);
        if(!_ret.isInt()) {
            System.out.println(n.f2.toString() + " should be an integer.");
        }
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        VariableType u = n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        _ret = ((MethodTable)argu).getVariable(n.f0.toString()).getType();
        if(!u.isInt()) {
            System.out.println(n.f5.toString() + " should be an integer.");
        }

        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public VariableType visit(IfStatement n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        _ret = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        if(!_ret.isBool()) {
            System.out.println(n.f2.toString() + " should be a boolean.");
        }
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public VariableType visit(WhileStatement n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        _ret = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        if(!_ret.isBool()) {
            System.out.println(n.f2.toString() + " should be a boolean.");
        }
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> ";"
     */
    public VariableType visit(PrintStatement n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        _ret = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        if(!_ret.isInt()) {
            System.out.println(n.f2.toString() + " should be an integer.");
        }
        return _ret;
    }

    /**
     * f0 -> AndExpression()
     *       | CompareExpression()
     *       | PlusExpression()
     *       | MinusExpression()
     *       | TimesExpression()
     *       | ArrayLookup()
     *       | ArrayLength()
     *       | MessageSend()
     *       | PrimaryExpression()
     */
    public VariableType visit(Expression n, SymbolTable argu) {
        VariableType _ret=n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "&&"
     * f2 -> PrimaryExpression()
     */
    public VariableType visit(AndExpression n, SymbolTable argu) {
        VariableType _ret=new BoolType();
        VariableType u1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        VariableType u2 = n.f2.accept(this, argu);
        if(!u1.isBool()) {
            System.out.println(n.f0.toString() + " should be a boolean.");
        }
        if(!u2.isBool()) {
            System.out.println(n.f2.toString() + " should be a boolean.");
        }


        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "<"
     * f2 -> PrimaryExpression()
     */
    public VariableType visit(CompareExpression n, SymbolTable argu) {
        VariableType _ret=new BoolType();
        VariableType u1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        VariableType u2 = n.f2.accept(this, argu);
        if(!u1.isInt()) {
            System.out.println(n.f0.toString() + " should be an integer.");
        }
        if(!u2.isInt()) {
            System.out.println(n.f2.toString() + " should be an integer.");
        }

        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "+"
     * f2 -> PrimaryExpression()
     */
    public VariableType visit(PlusExpression n, SymbolTable argu) {
        VariableType _ret=new IntType();
        VariableType u1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        VariableType u2 = n.f2.accept(this, argu);
        if(!u1.isInt()) {
            System.out.println(n.f0.toString() + " should be an integer.");
        }
        if(!u2.isInt()) {
            System.out.println(n.f2.toString() + " should be an integer.");
        }
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "-"
     * f2 -> PrimaryExpression()
     */
    public VariableType visit(MinusExpression n, SymbolTable argu) {
        VariableType _ret=new IntType();
        VariableType u1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        VariableType u2 = n.f2.accept(this, argu);
        if(!u1.isInt()) {
            System.out.println(n.f0.toString() + " should be an integer.");
        }
        if(!u2.isInt()) {
            System.out.println(n.f2.toString() + " should be an integer.");
        }
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "*"
     * f2 -> PrimaryExpression()
     */
    public VariableType visit(TimesExpression n, SymbolTable argu) {
        VariableType _ret=new IntType();
        VariableType u1 = n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        VariableType u2 = n.f2.accept(this, argu);
        if(!u1.isInt()) {
            System.out.println(n.f0.toString() + " should be an integer.");
        }
        if(!u2.isInt()) {
            System.out.println(n.f2.toString() + " should be an integer.");
        }
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "["
     * f2 -> PrimaryExpression()
     * f3 -> "]"
     */
    public VariableType visit(ArrayLookup n, SymbolTable argu) {
      //  if(((MethodTable)argu).isDefined(n.f0.toString()) == null) {
        //    System.out.println(n.f0.toString() + " is undefined.");
       // }
        VariableType _ret=n.f0.accept(this, argu);
        if(!_ret.isArray()) {
            System.out.println(n.f0.toString() + " should be an array.");
        }
        n.f1.accept(this, argu);
        VariableType u = n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        if(!u.isInt()) {
            System.out.println(n.f2.toString() + " should be an integer.");
        }


        _ret = ((MethodTable)argu).getVariable(n.f0.toString()).getType();
        return new IntType();
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> "length"
     */
    public VariableType visit(ArrayLength n, SymbolTable argu) {
        VariableType _ret= n.f0.accept(this, argu);
        if(!_ret.isArray()) {
            System.out.println(n.f0.toString() + " should be an array.");
        }
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return new IntType();
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ExpressionList() )?
     * f5 -> ")"
     */
    public VariableType visit(MessageSend n, SymbolTable argu) {
        if(ClassTree.getClassTable(n.f0.toString()) == null)
            System.out.println(n.f0.toString() + " is undefined.");
        else if(!ClassTree.getClassTable(n.f0.toString()).doesMethodExist(n.f2.f0.toString()))
            System.out.println(n.f2.f0.toString() + " is undefined.");
        else {
            VariableType _ret = ClassTree.getClassTable(n.f0.toString()).getMethod(n.f2.f0.toString()).getReturnType();
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            return _ret;
        }
        return null;
    }

    /**
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     */
    public VariableType visit(ExpressionList n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Expression()
     */
    public VariableType visit(ExpressionRest n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     *       | TrueLiteral()
     *       | FalseLiteral()
     *       | Identifier()
     *       | ThisExpression()
     *       | ArrayAllocationExpression()
     *       | AllocationExpression()
     *       | NotExpression()
     *       | BracketExpression()
     */
    public VariableType visit(PrimaryExpression n, SymbolTable argu) {
        VariableType _ret=n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public VariableType visit(IntegerLiteral n, SymbolTable argu) {
        VariableType _ret=new IntType();
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "true"
     */
    public VariableType visit(TrueLiteral n, SymbolTable argu) {
        VariableType _ret=new BoolType();
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "false"
     */
    public VariableType visit(FalseLiteral n, SymbolTable argu) {
        VariableType _ret=new BoolType();
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public VariableType visit(Identifier n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
       // _ret = ((MethodTable)argu).getVariable(n.f0.toString()).getType();
        if(argu instanceof MethodTable) {
            if(((MethodTable)argu).isDefined(n.f0.toString()) == null)
                System.out.println(n.f0.toString() + " is undefined.");
            else if(ClassTree.getClassTable(n.f0.toString()) == null) {
                System.out.println(n.f0.toString() + " is undefined.");
            }
            else if(((MethodTable)argu).isDefined(n.f0.toString()) != null)
                return ((MethodTable)argu).isDefined(n.f0.toString()).getType();
            else if(ClassTree.getClassTable(n.f0.toString()) != null)
                return new ClassType(n.f0.toString());
        }
        else if(argu instanceof ClassTable) {
            return null;
        }
        return _ret;
    }

    /**
     * f0 -> "this"
     */
    public VariableType visit(ThisExpression n, SymbolTable argu) {
        VariableType _ret= new ClassType(((MethodTable)argu).getClassTable().getName());
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Expression()
     * f4 -> "]"
     */
    public VariableType visit(ArrayAllocationExpression n, SymbolTable argu) {
        VariableType _ret=new ArraysType();
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        VariableType u = n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        if(!u.isInt()) {
            System.out.println(n.f3.toString() + " should be an integer.");
        }
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public VariableType visit(AllocationExpression n, SymbolTable argu) {
        if(ClassTree.getClassTable(n.f1.toString()) == null) {
            System.out.println(n.f1.toString() + " is undefined.");
        }
        VariableType _ret= new ClassType(n.f1.toString());
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);

        return _ret;
    }

    /**
     * f0 -> "!"
     * f1 -> Expression()
     */
    public VariableType visit(NotExpression n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        _ret = n.f1.accept(this, argu);
        if(_ret != new BoolType()) {
            System.out.println(n.f1.toString() + "should be boolean.");
        }
        return _ret;
    }

    /**
     * f0 -> "("
     * f1 -> Expression()
     * f2 -> ")"
     */
    public VariableType visit(BracketExpression n, SymbolTable argu) {
        VariableType _ret=null;
        n.f0.accept(this, argu);
        _ret = n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        return _ret;
    }

}
