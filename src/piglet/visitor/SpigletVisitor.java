package piglet.visitor;

/**
 * Created by lianxiang on 2017/5/31.
 */
//
// Generated by JTB 1.3.2
//

import piglet.piglet2spiglet.SpigletMultiStmt;
import piglet.piglet2spiglet.SpigletStmt;
import piglet.syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class SpigletVisitor extends GJDepthFirst<SpigletStmt, Integer> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    private Integer tmpNum = 10000;
    private Integer getTemp() {
        tmpNum -= 1;
        return tmpNum;
    }
    public SpigletStmt visit(NodeList n, Integer argu) {
        SpigletStmt _ret= new SpigletStmt("");
        int _count=0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            _ret.appendStmt(e.nextElement().accept(this,argu));
            _count++;
        }
        return _ret;
    }

    public SpigletStmt visit(NodeListOptional n, Integer argu) {
        if ( n.present() ) {
            SpigletMultiStmt _ret=new SpigletMultiStmt();
            int _count=0;
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                _ret.pushStmt(e.nextElement().accept(this,argu));
                _count++;
            }
            return _ret;
        }
        else
            return null;
    }

    public SpigletStmt visit(NodeOptional n, Integer argu) {
        if ( n.present() )
            return n.node.accept(this,argu);
        else
            return null;
    }

    public SpigletStmt visit(NodeSequence n, Integer argu) {
        SpigletStmt _ret=new SpigletStmt("");
        int _count=0;
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            _ret.appendStmt(e.nextElement().accept(this,argu));
            _count++;
        }
        return _ret;
    }

    public SpigletStmt visit(NodeToken n, Integer argu) {
        return new SpigletStmt(n.toString());
    }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> "MAIN"
     * f1 -> StmtList()
     * f2 -> "END"
     * f3 -> ( Procedure() )*
     * f4 -> <EOF>
     */
    public SpigletStmt visit(Goal n, Integer argu) {
        SpigletStmt _ret=new SpigletStmt("MAIN\n");
        n.f0.accept(this, argu);
        _ret.appendStmt(n.f1.accept(this, argu));
        _ret.appendStmt("END\n");
        n.f2.accept(this, argu);
        _ret.appendStmt(n.f3.accept(this, argu));
        n.f4.accept(this, argu);

        return _ret;
    }

    /**
     * f0 -> ( ( Label() )? Stmt() )*
     */
    public SpigletStmt visit(StmtList n, Integer argu) {
        SpigletStmt _ret= n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> StmtExp()
     */
    public SpigletStmt visit(Procedure n, Integer argu) {
        SpigletStmt _ret= n.f0.accept(this, argu);
        _ret.appendStmt("[");
        n.f1.accept(this, argu);
        _ret.appendStmt(n.f2.accept(this, argu));
        _ret.appendStmt("]\n");
        n.f3.accept(this, argu);

        _ret.appendStmt(n.f4.accept(this, null));
        return _ret;
    }

    /**
     * f0 -> NoOpStmt()
     *       | ErrorStmt()
     *       | CJumpStmt()
     *       | JumpStmt()
     *       | HStoreStmt()
     *       | HLoadStmt()
     *       | MoveStmt()
     *       | PrintStmt()
     */
    public SpigletStmt visit(Stmt n, Integer argu) {
        SpigletStmt _ret= n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "NOOP"
     */
    public SpigletStmt visit(NoOpStmt n, Integer argu) {
        SpigletStmt _ret=new SpigletStmt("NOOP\n");
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "ERROR"
     */
    public SpigletStmt visit(ErrorStmt n, Integer argu) {
        SpigletStmt _ret=new SpigletStmt("ERROR\n");
        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "CJUMP"
     * f1 -> Exp()
     * f2 -> Label()
     */
    public SpigletStmt visit(CJumpStmt n, Integer argu) {
        SpigletStmt _ret=new SpigletStmt("");
        n.f0.accept(this, argu);
        SpigletStmt sp = n.f1.accept(this, argu);
        if(sp.isTemp()) {
            _ret.appendStmt("CJUMP ");
            _ret.appendStmt(sp);
            _ret.appendStmt( " ");
        }
        else {
            Integer newTemp = getTemp();
            _ret.appendStmt(sp);
            _ret.appendStmt("MOVE TEMP " + newTemp.toString() + " TEMP ");
            _ret.appendStmt(sp.getTmp().toString());
            _ret.appendStmt("\n");
            _ret.appendStmt("CJUMP TEMP " + newTemp + " ");
        }
        _ret.appendStmt(n.f2.accept(this, argu));
        _ret.appendStmt("\n");
        return _ret;
    }

    /**
     * f0 -> "JUMP"
     * f1 -> Label()
     */
    public SpigletStmt visit(JumpStmt n, Integer argu) {
        SpigletStmt _ret=new SpigletStmt("JUMP ");
        n.f0.accept(this, argu);
        _ret.appendStmt(n.f1.accept(this, argu));
        _ret.appendStmt("\n");
        return _ret;
    }

    /**
     * f0 -> "HSTORE"
     * f1 -> Exp()
     * f2 -> IntegerLiteral()
     * f3 -> Exp()
     */
    public SpigletStmt visit(HStoreStmt n, Integer argu) {
        SpigletStmt _ret= new SpigletStmt("");
        n.f0.accept(this, argu);
        SpigletStmt exp1= n.f1.accept(this, argu);
        if(!exp1.isTemp()) {
            Integer newTemp = getTemp();
            if(!exp1.isSimple())
                 _ret.appendStmt(exp1);
            _ret.appendStmt("MOVE TEMP " + newTemp + " ");
            if(!exp1.isSimple())
            _ret.appendStmt("TEMP " + exp1.getTmp().toString());
            else _ret.appendStmt(exp1);
            _ret.appendStmt("\n");
            exp1 = new SpigletStmt("TEMP " + newTemp);
        }
        n.f2.accept(this, argu);
        SpigletStmt exp2 = n.f3.accept(this, argu);
        if(!exp2.isTemp()) {
            Integer newTemp = getTemp();
            if(!exp2.isSimple())
                _ret.appendStmt(exp2);
            _ret.appendStmt("MOVE TEMP " + newTemp + " ");
            if(!exp2.isSimple())
                _ret.appendStmt("TEMP " + exp2.getTmp().toString());
            else _ret.appendStmt(exp2);
            _ret.appendStmt("\n");
            exp2 = new SpigletStmt("TEMP " + newTemp);
        }
        _ret.appendStmt("HSTORE ");
        _ret.appendStmt(exp1);
        _ret.appendStmt(" " + n.f2.f0.toString() + " " );
        _ret.appendStmt(exp2);
        _ret.appendStmt("\n");
        return _ret;
    }

    /**
     * f0 -> "HLOAD"
     * f1 -> Temp()
     * f2 -> Exp()
     * f3 -> IntegerLiteral()
     */
    public SpigletStmt visit(HLoadStmt n, Integer argu) {
        SpigletStmt _ret=new SpigletStmt("");
        n.f0.accept(this, argu);
        SpigletStmt tmp = n.f1.accept(this, argu);
        SpigletStmt exp1 = n.f2.accept(this, argu);
        if(!exp1.isTemp()) {
            Integer newTemp = getTemp();

            // Bug?
            _ret.appendStmt(exp1);
            _ret.appendStmt("MOVE TEMP " + newTemp + " TEMP " + exp1.getTmp());

            _ret.appendStmt("\n");
            exp1 = new SpigletStmt("TEMP " + newTemp);
        }
        SpigletStmt i = n.f3.accept(this, argu);
        _ret.appendStmt("HLOAD ");
        _ret.appendStmt(tmp);
        _ret.appendStmt(" ");
        _ret.appendStmt(exp1);
        _ret.appendStmt(" ");
        _ret.appendStmt(i);
        _ret.appendStmt("\n");
        _ret.setTmp(tmp.getTmp());
        return _ret;
    }

    /**
     * f0 -> "MOVE"
     * f1 -> Temp()
     * f2 -> Exp()
     */
    public SpigletStmt visit(MoveStmt n, Integer argu) {
        SpigletStmt _ret= new SpigletStmt("");
        n.f0.accept(this, argu);
        SpigletStmt tmp = n.f1.accept(this, argu);
        SpigletStmt exp1 = n.f2.accept(this, argu);
        if(!exp1.isTemp()) {
            Integer newTemp = getTemp();
            if(!exp1.isSimple())
                _ret.appendStmt(exp1);

            _ret.appendStmt("MOVE TEMP " + newTemp + " ");
            if(!exp1.isSimple())
                _ret.appendStmt("TEMP " + exp1.getTmp().toString());
            else
                _ret.appendStmt(exp1);
            _ret.appendStmt("\n");
            exp1 = new SpigletStmt("TEMP " + newTemp);
        }
        _ret.setTmp(tmp.getTmp());
        _ret.appendStmt("MOVE ");
        _ret.appendStmt(tmp);
        _ret.appendStmt(" ");
        _ret.appendStmt(exp1);
        _ret.appendStmt("\n");
        return _ret;
    }

    /**
     * f0 -> "PRINT"
     * f1 -> Exp()
     */
    public SpigletStmt visit(PrintStmt n, Integer argu) {
        SpigletStmt _ret= new SpigletStmt("");
        n.f0.accept(this, argu);
        SpigletStmt exp1 = n.f1.accept(this, argu);
        if(!exp1.isSimple()) {
            _ret.appendStmt(exp1);
            Integer newTemp = getTemp();
            _ret.appendStmt("MOVE TEMP " + newTemp + " TEMP ");
            _ret.appendStmt(exp1.getTmp().toString());
            _ret.appendStmt("\n");
            exp1 = new SpigletStmt("TEMP " + newTemp);
        }
        _ret.appendStmt("PRINT ");
        _ret.appendStmt(" ");
        _ret.appendStmt(exp1);
        _ret.appendStmt("\n");


        return _ret;
    }

    /**
     * f0 -> StmtExp()
     *       | Call()
     *       | HAllocate()
     *       | BinOp()
     *       | Temp()
     *       | IntegerLiteral()
     *       | Label()
     */
    public SpigletStmt visit(Exp n, Integer argu) {
        SpigletStmt _ret= n.f0.accept(this, -1);

        return _ret;
    }

    /**
     * f0 -> "BEGIN"
     * f1 -> StmtList()
     * f2 -> "RETURN"
     * f3 -> Exp()
     * f4 -> "END"
     */
    public SpigletStmt visit(StmtExp n, Integer argu) {
        SpigletStmt _ret = new SpigletStmt("");
        if(argu == null)
            _ret=new SpigletStmt("BEGIN\n");
        n.f0.accept(this, argu);
        _ret.appendStmt(n.f1.accept(this, argu));
        n.f2.accept(this, argu);
        SpigletStmt exp1 = n.f3.accept(this, argu);
        if(!exp1.isSimple()) {
            Integer newTemp = getTemp();
            _ret.appendStmt(exp1);
            _ret.appendStmt("MOVE TEMP " + newTemp + " TEMP " + exp1.getTmp());

            _ret.appendStmt("\n");
            exp1 = new SpigletStmt("TEMP " + newTemp);
            _ret.setTmp(newTemp);
        }
        else
            _ret.setTmp(exp1.getTmp());
        n.f4.accept(this, argu);
        if(argu == null) {
            _ret.appendStmt("RETURN ");
            _ret.appendStmt(exp1);
            _ret.appendStmt("\nEND\n");
        }
        return _ret;
    }

    /**
     * f0 -> "CALL"
     * f1 -> Exp()
     * f2 -> "("
     * f3 -> ( Exp() )*
     * f4 -> ")"
     */
    public SpigletStmt visit(Call n, Integer argu) {
        SpigletStmt _ret=new SpigletStmt("");
        n.f0.accept(this, argu);
        SpigletStmt exp1 = n.f1.accept(this, argu);
        if(!exp1.isSimple()) {
            Integer newTemp = getTemp();
            _ret.appendStmt(exp1);
            _ret.appendStmt("MOVE TEMP " + newTemp + " TEMP ");
            _ret.appendStmt(exp1.getTmp().toString());
            _ret.appendStmt("\n");
            exp1 = new SpigletStmt("TEMP " + newTemp);
            //_ret.setTmp(newTemp);
        }
        else
            _ret.setTmp(exp1.getTmp());
        n.f2.accept(this, argu);
        SpigletStmt exp2 = n.f3.accept(this, argu);
        SpigletStmt exp3 = new SpigletStmt("");
        if(exp2 != null && exp2 instanceof SpigletMultiStmt) {
            for(int i = 0; i < ((SpigletMultiStmt) exp2).getStmts().size(); ++i) {
                SpigletStmt sp = ((SpigletMultiStmt) exp2).getStmts().elementAt(i);
                if(!sp.isTemp()) {
                    Integer newTemp = getTemp();
                    if(!sp.isSimple())
                        _ret.appendStmt(sp);
                    _ret.appendStmt("MOVE TEMP " + newTemp + " ");
                    if(!sp.isSimple())
                        _ret.appendStmt("TEMP " + sp.getTmp());
                    else
                        _ret.appendStmt(sp);
                    _ret.appendStmt("\n");
                    exp3.appendStmt("TEMP " + newTemp + " ");
                }
                else {
                    exp3.appendStmt(sp);
                    exp3.appendStmt(" ");
                }
            }
        }
        Integer call = getTemp();
        _ret.appendStmt("MOVE TEMP " + call + " ");
        _ret.setTmp(call);
        _ret.appendStmt("CALL ");
        _ret.appendStmt(exp1);
        _ret.appendStmt(" (");
        _ret.appendStmt(exp3);
        _ret.appendStmt(")");
        _ret.appendStmt("\n");
        n.f4.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "HALLOCATE"
     * f1 -> Exp()
     */
    public SpigletStmt visit(HAllocate n, Integer argu) {
        SpigletStmt _ret=new SpigletStmt("");
        n.f0.accept(this, argu);
        SpigletStmt exp1 = n.f1.accept(this, argu);
        if(!exp1.isSimple()) {
            Integer newTemp = getTemp();
            _ret.appendStmt(exp1);
            _ret.appendStmt("MOVE TEMP " + newTemp + " " + exp1.getTmp());
            _ret.setTmp(exp1.getTmp());
            _ret.appendStmt("\n");
            exp1 = new SpigletStmt("TEMP " + newTemp);
        }
        _ret.appendStmt("MOVE TEMP ");
        Integer allo = getTemp();
        _ret.setTmp(allo);
        _ret.appendStmt(allo.toString() + " ");
        _ret.appendStmt("HALLOCATE ");
        _ret.appendStmt(exp1);
        _ret.appendStmt("\n");
        return _ret;
    }

    /**
     * f0 -> Operator()
     * f1 -> Exp()
     * f2 -> Exp()
     */
    public SpigletStmt visit(BinOp n, Integer argu) {
        SpigletStmt _ret=new SpigletStmt("");
        SpigletStmt oper = n.f0.accept(this, argu);
        SpigletStmt exp1 = n.f1.accept(this, argu);
        if(!exp1.isTemp()) {
            Integer newTemp = getTemp();
            if(!exp1.isSimple())
                _ret.appendStmt(exp1);
            _ret.appendStmt("MOVE TEMP " + newTemp + " ");
            if(!exp1.isSimple())
                _ret.appendStmt("TEMP " + exp1.getTmp());
            else
                _ret.appendStmt(exp1);
            _ret.appendStmt("\n");
            exp1 = new SpigletStmt("TEMP " + newTemp);
        }
        SpigletStmt exp2 = n.f2.accept(this, argu);
        if(!exp2.isSimple()) {
            Integer newTemp = getTemp();
            _ret.appendStmt(exp2);
            _ret.appendStmt("MOVE TEMP " + newTemp + " TEMP ");
            _ret.appendStmt(exp2.getTmp().toString());
            _ret.appendStmt("\n");
            exp2 = new SpigletStmt("TEMP " + newTemp);
        }
        _ret.appendStmt("MOVE TEMP ");
        Integer op = getTemp();
        _ret.appendStmt(op + " ");
        _ret.setTmp(op);
        _ret.appendStmt(oper);
        _ret.appendStmt(" " );
        _ret.appendStmt(exp1);
        _ret.appendStmt(" ");
        _ret.appendStmt(exp2);
        _ret.appendStmt("\n");
        return _ret;
    }

    /**
     * f0 -> "LT"
     *       | "PLUS"
     *       | "MINUS"
     *       | "TIMES"
     */
    public SpigletStmt visit(Operator n, Integer argu) {
        SpigletStmt _ret=        n.f0.accept(this, argu);
        return _ret;
    }

    /**
     * f0 -> "TEMP"
     * f1 -> IntegerLiteral()
     */
    public SpigletStmt visit(Temp n, Integer argu) {
        SpigletStmt _ret= new SpigletStmt("TEMP ");
        n.f0.accept(this, argu);
        SpigletStmt tmp = n.f1.accept(this, argu);
        _ret.appendStmt(tmp);
        _ret.flipSimple();
        _ret.setTmp(tmp.getTmp());

        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public SpigletStmt visit(IntegerLiteral n, Integer argu) {
        SpigletStmt _ret=new SpigletStmt(n.f0.toString());
        _ret.flipSimple();

        n.f0.accept(this, argu);
        _ret.setTmp(Integer.parseInt(n.f0.toString()));
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public SpigletStmt visit(Label n, Integer argu) {
        SpigletStmt _ret=new SpigletStmt(n.f0.toString() + " ");
        _ret.flipSimple();
        n.f0.accept(this, argu);
        return _ret;
    }

}
